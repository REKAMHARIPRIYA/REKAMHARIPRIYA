{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNEQxgI70XiQno+9SfCEOA9",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/REKAMHARIPRIYA/REKAMHARIPRIYA/blob/main/Titanic%20ship%20prediction.ipy\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 502
        },
        "id": "8i7VBc9-68GW",
        "outputId": "a148a428-9dd4-4a52-aa7a-89a7306fb5fb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Survived  Pclass  \\\n",
              "0              1         0       3   \n",
              "1              2         1       1   \n",
              "2              3         1       3   \n",
              "3              4         1       1   \n",
              "4              5         0       3   \n",
              "..           ...       ...     ...   \n",
              "886          887         0       2   \n",
              "887          888         1       1   \n",
              "888          889         0       3   \n",
              "889          890         1       1   \n",
              "890          891         0       3   \n",
              "\n",
              "                                                  Name     Sex   Age  SibSp  \\\n",
              "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                             Allen, Mr. William Henry    male  35.0      0   \n",
              "..                                                 ...     ...   ...    ...   \n",
              "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
              "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
              "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
              "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
              "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
              "\n",
              "     Parch            Ticket     Fare Cabin Embarked  \n",
              "0        0         A/5 21171   7.2500   NaN        S  \n",
              "1        0          PC 17599  71.2833   C85        C  \n",
              "2        0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3        0            113803  53.1000  C123        S  \n",
              "4        0            373450   8.0500   NaN        S  \n",
              "..     ...               ...      ...   ...      ...  \n",
              "886      0            211536  13.0000   NaN        S  \n",
              "887      0            112053  30.0000   B42        S  \n",
              "888      2        W./C. 6607  23.4500   NaN        S  \n",
              "889      0            111369  30.0000  C148        C  \n",
              "890      0            370376   7.7500   NaN        Q  \n",
              "\n",
              "[891 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fe8e4dc7-801d-42ef-bae9-5cdcc026e8f8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>B42</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C148</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 12 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fe8e4dc7-801d-42ef-bae9-5cdcc026e8f8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fe8e4dc7-801d-42ef-bae9-5cdcc026e8f8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fe8e4dc7-801d-42ef-bae9-5cdcc026e8f8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import pandas as pd\n",
        "df=pd.read_csv('/content/train.csv')\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "id": "uQWUPFo4UAW-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "outputId": "5cfa246e-44f8-4947-fe3b-0026dc6103e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Survived  Pclass  \\\n",
              "0            1         0       3   \n",
              "1            2         1       1   \n",
              "2            3         1       3   \n",
              "3            4         1       1   \n",
              "4            5         0       3   \n",
              "\n",
              "                                                Name     Sex   Age  SibSp  \\\n",
              "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                           Allen, Mr. William Henry    male  35.0      0   \n",
              "\n",
              "   Parch            Ticket     Fare Cabin Embarked  \n",
              "0      0         A/5 21171   7.2500   NaN        S  \n",
              "1      0          PC 17599  71.2833   C85        C  \n",
              "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3      0            113803  53.1000  C123        S  \n",
              "4      0            373450   8.0500   NaN        S  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-082878de-e8d1-4cc0-8082-be8ef0c2b515\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-082878de-e8d1-4cc0-8082-be8ef0c2b515')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-082878de-e8d1-4cc0-8082-be8ef0c2b515 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-082878de-e8d1-4cc0-8082-be8ef0c2b515');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "id": "TuKp2dB5FYav",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1ad84ec3-f519-4cf4-88c9-46be7de3970d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   Age          714 non-null    float64\n",
            " 6   SibSp        891 non-null    int64  \n",
            " 7   Parch        891 non-null    int64  \n",
            " 8   Ticket       891 non-null    object \n",
            " 9   Fare         891 non-null    float64\n",
            " 10  Cabin        204 non-null    object \n",
            " 11  Embarked     889 non-null    object \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "id": "G4VbZ1Z3Y3XZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "4b1764b7-e494-437e-f6ab-9855e1e4fe40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
              "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
              "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
              "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
              "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
              "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
              "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
              "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
              "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
              "\n",
              "            Parch        Fare  \n",
              "count  891.000000  891.000000  \n",
              "mean     0.381594   32.204208  \n",
              "std      0.806057   49.693429  \n",
              "min      0.000000    0.000000  \n",
              "25%      0.000000    7.910400  \n",
              "50%      0.000000   14.454200  \n",
              "75%      0.000000   31.000000  \n",
              "max      6.000000  512.329200  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4d600c2-e8ec-45f7-ad65-a6b1944efa87\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>714.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.383838</td>\n",
              "      <td>2.308642</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>0.523008</td>\n",
              "      <td>0.381594</td>\n",
              "      <td>32.204208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>257.353842</td>\n",
              "      <td>0.486592</td>\n",
              "      <td>0.836071</td>\n",
              "      <td>14.526497</td>\n",
              "      <td>1.102743</td>\n",
              "      <td>0.806057</td>\n",
              "      <td>49.693429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>223.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>20.125000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.910400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.454200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>668.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>512.329200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4d600c2-e8ec-45f7-ad65-a6b1944efa87')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e4d600c2-e8ec-45f7-ad65-a6b1944efa87 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e4d600c2-e8ec-45f7-ad65-a6b1944efa87');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "id": "_hbqPxVrY-iv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "aac9b64f-41bb-46b4-c3ea-d4cb390c83e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      0\n",
              "Survived         0\n",
              "Pclass           0\n",
              "Name             0\n",
              "Sex              0\n",
              "Age            177\n",
              "SibSp            0\n",
              "Parch            0\n",
              "Ticket           0\n",
              "Fare             0\n",
              "Cabin          687\n",
              "Embarked         2\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.nunique()"
      ],
      "metadata": {
        "id": "aZgimqdVZG-9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bbf652b1-0fef-4dbe-df8d-2e7c5c18f825"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId    891\n",
              "Survived         2\n",
              "Pclass           3\n",
              "Name           891\n",
              "Sex              2\n",
              "Age             88\n",
              "SibSp            7\n",
              "Parch            7\n",
              "Ticket         681\n",
              "Fare           248\n",
              "Cabin          147\n",
              "Embarked         3\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Survived\"].value_counts()"
      ],
      "metadata": {
        "id": "vTD5F7swZPBv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "692d5233-3329-42dd-f4e4-20639bc0d8cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    549\n",
              "1    342\n",
              "Name: Survived, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(5,5))\n",
        "df[\"Survived\"].value_counts().plot.pie(explode=[0.05,0.05], autopct='%1.1f%%',\n",
        "                                          labels=[\"Not Survived\",\"Survived\"],\n",
        "                                          shadow=True).set_title(\"Target Distribution\")"
      ],
      "metadata": {
        "id": "uCsQI5n0ZeKr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.duplicated().sum()"
      ],
      "metadata": {
        "id": "bEIIg5mpZqWy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f2a2b7e9-c8b6-4dd2-a0f5-2a67ad43f54e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[[\"Age\"]].boxplot()"
      ],
      "metadata": {
        "id": "ZlTax_v9Z2k-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "07757563-7fbb-43f9-cb66-5953f19d73c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f71990877d0>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[[\"Fare\"]].boxplot()"
      ],
      "metadata": {
        "id": "BaJ8b_05Z9-8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "f424ad2b-ec06-46bc-8e92-74a4a2cad386"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f7198b2fb10>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATE0lEQVR4nO3df2xdd3nH8ffjJHVQwmhoilXF1RwJ0FqWQJjVsm5CNqXNFEZSpPFj2iBlUSKHJmJKtaXlH4o0rc1aYF1Y6yXrRDrtBzAW6m5hTRi+mqauHS3dEmgZZCxVEhW6pGmKAzNu8+wPnxT75ia+N/5xfU/eLym65zzne30fS9cfn3z9vedEZiJJKpe2ZjcgSZp6hrsklZDhLkklZLhLUgkZ7pJUQnOb3QDA4sWLs6urq9ltSGc5deoUCxYsaHYbUk1PPvnkscy8vNaxWRHuXV1dPPHEE81uQzpLpVKhp6en2W1INUXEs+c65rSMJJWQ4S5JJWS4S1IJGe6SVEKGuySVkOEu1bBy5Ura2tro7e2lra2NlStXNrslqSGGu1Rl5cqV7N27l76+Ph5++GH6+vrYu3evAa+WMivWuUuzyb59+9i4cSP33XcflUqF++67D4D+/v4mdybVzzN3qUpmcuedd46r3XnnnXjvA7USw12qEhHcfvvt42q33347EdGkjqTG1TUtExGHgB8BrwAvZ2Z3RLwe+ALQBRwCPpCZJ2L0J+BeYBXwY+DmzPzm1LcuTY8bbriB+++/H4BVq1bxsY99jPvvv58bb7yxyZ1J9Yt6/qtZhHt3Zh4bU/sj4IXMvCsibgMWZebWiFgFbGY03K8F7s3Ma8/39bu7u9Nry2g2WblyJfv27SMziQhuuOEGHnnkkWa3JY0TEU9mZnetY5OZllkD7Cq2dwE3jak/mKMeAy6NiCsm8TrSjHvkkUc4ffo0g4ODnD592mBXy6l3tUwCeyMigT/LzB1AR2Y+Vxz/AdBRbC8BDo957pGi9tyYGhGxAdgA0NHRQaVSuaBvQJpOQ0NDvjfVkuoN91/NzKMR8QZgX0R8Z+zBzMwi+OtW/ILYAaPTMl5WVbORl/xVq6prWiYzjxaPzwO7gWuAH56Zbikeny+GHwWuHPP0zqImSZohE4Z7RCyIiNee2QZuBL4FDABri2FrgYeK7QHgIzHqHcDJMdM3kqQZUM+0TAewu1jjOxf468z8p4j4BvDFiFgHPAt8oBi/h9GVMgcZXQr50SnvWpJ0XhOGe2Z+H3hrjfpx4Poa9QRumZLuJEkXxE+oSlIJGe6SVEKGuySVkOEuSSVkuEtSCRnuklRChrsklZDhLkklZLhLUgkZ7pJUQoa7JJWQ4S5JJWS4S1IJGe6SVEKGuySVkOEuSSVkuEtSCRnuklRChrsklZDhLkklZLhLUgkZ7pJUQoa7JJWQ4S5JJWS4S1IJGe6SVEKGuySVkOEuSSVkuEtSCdUd7hExJyKeioh/KPaXRsTjEXEwIr4QEZcU9fZi/2BxvGt6WpcknUsjZ+4fB54Zs78N+GxmvhE4Aawr6uuAE0X9s8U4SdIMqivcI6ITeA/w58V+AO8C/q4Ysgu4qdheU+xTHL++GC9JmiH1nrn/MfD7wOli/zLgxcx8udg/AiwptpcAhwGK4yeL8ZKkGTJ3ogER8evA85n5ZET0TNULR8QGYANAR0cHlUplqr60NGWGhoZ8b6olTRjuwK8AqyNiFTAf+DngXuDSiJhbnJ13AkeL8UeBK4EjETEXeB1wvPqLZuYOYAdAd3d39vT0TPJbkaZepVLB96Za0YTTMpl5e2Z2ZmYX8CHg65n5W8Ag8BvFsLXAQ8X2QLFPcfzrmZlT2rUk6bwms859K7AlIg4yOqf+QFF/ALisqG8Bbptci5KkRtUzLfOqzKwAlWL7+8A1Ncb8H/D+KehNknSB/ISqJJWQ4S5JJWS4S1IJGe6SVEKGuySVkOEuSSVkuEtSCRnuklRChrsklZDhLkklZLhLUgkZ7pJUQoa7JJWQ4S5JJWS4S1IJGe6SVEKGuySVkOEuSSVkuEtSCRnuklRChrsklZDhLkklZLhLUgkZ7pJUQoa7JJWQ4S5JJWS4S1IJGe6SVEKGuySVkOEuSSU0YbhHxPyI+PeI+M+I+HZEfKqoL42IxyPiYER8ISIuKertxf7B4njX9H4LkqRq9Zy5DwPvysy3Am8Dfi0i3gFsAz6bmW8ETgDrivHrgBNF/bPFOEnSDJow3HPUULE7r/iXwLuAvyvqu4Cbiu01xT7F8esjIqasY0nShObWMygi5gBPAm8E/hT4b+DFzHy5GHIEWFJsLwEOA2TmyxFxErgMOFb1NTcAGwA6OjqoVCqT+kak6TA0NOR7Uy2prnDPzFeAt0XEpcBu4Bcm+8KZuQPYAdDd3Z09PT2T/ZLSlKtUKvjeVCtqaLVMZr4IDAK/DFwaEWd+OXQCR4vto8CVAMXx1wHHp6RbSVJd6lktc3lxxk5EvAa4AXiG0ZD/jWLYWuChYnug2Kc4/vXMzKlsWpJ0fvVMy1wB7Crm3duAL2bmP0TE08DfRsQfAE8BDxTjHwD+MiIOAi8AH5qGviVJ5zFhuGfmfmBFjfr3gWtq1P8PeP+UdCdJuiB+QlWSSshwl6QSMtwlqYQMd0kqIcNdkkrIcJdqWL58ORFBb28vEcHy5cub3ZLUEMNdqrJ8+XIOHDhAW9voj0dbWxsHDhww4NVSDHepyoEDB4gI7r77br761a9y9913ExEcOHCg2a1JdTPcpRruuOMOtmzZwvz589myZQt33HFHs1uSGmK4SzU8/vjj592XZjvDXaoSEezZs4c1a9bw4osvsmbNGvbs2YP3nFErMdylKrfccgsAAwMDvO9972NgYGBcXWoFhrtUQ0Qwd+7odfXmzp3rWbtajuEuVdm5cyf33HMPIyMjDA4OMjIywj333MPOnTub3ZpUN8NdqjI8PExfX9+4Wl9fH8PDw03qSGqc4S5VaW9vp7+/f1ytv7+f9vb2JnUkNa6uG2RLF5P169ezdetWAK6++mo+85nPsHXr1rPO5qXZzHCXqmzfvh2AT3ziEwwPD9Pe3k5fX9+rdakVxGy4d3V3d3c+8cQTzW5DOkulUqGnp6fZbUg1RcSTmdld65hz7lINXhVSrc5wl6qcuSrk6tWr2b17N6tXr/aqkGo5TstIVSKCFStW8NOf/pRnnnmGq666iksuuYSnnnqK2fDzIp1xvmkZ/6Aq1XD8+HE+//nP88orrzBnzhxuvvnmZrckNcRpGamGzs5Oent7mTt3Lr29vXR2dja7JakhhrtUw6OPPjruqpCPPvpos1uSGuK0jFTlLW95C9/97ncZGBh49YqQ8+bN481vfnOTO5Pq55m7VOWll15iZGSE6667ji996Utcd911jIyM8NJLLzW7NaluhrtU5fDhw6xYsYKTJ0/ywQ9+kJMnT7JixQoOHz7c7NakujktI9Wwd+9eFi9e/OonVI8dO8bll1/e7LakunnmLtWwbt268+5Ls92E4R4RV0bEYEQ8HRHfjoiPF/XXR8S+iPhe8bioqEdE/ElEHIyI/RHx9un+JqSptGzZMgYGBsatlhkYGGDZsmXNbk2q24SfUI2IK4ArMvObEfFa4EngJuBm4IXMvCsibgMWZebWiFgFbAZWAdcC92bmted7DT+hqtnmzCUIzli2bBn79+9vYkfS2SZ14bDMfC4zv1ls/wh4BlgCrAF2FcN2MRr4FPUHc9RjwKXFLwipZezfv5/MZHBwkMw02NVyGvqDakR0ASuAx4GOzHyuOPQDoKPYXgKMXVZwpKg9N6ZGRGwANgB0dHRQqVQa61yaAUNDQ7431ZLqDveIWAh8GfjdzHxp7N3gMzMjoqErKmXmDmAHjE7LeM1szUZez12tqq7VMhExj9Fg/6vM/Pui/MMz0y3F4/NF/Shw5ZindxY1SdIMqWe1TAAPAM9k5mfGHBoA1hbba4GHxtQ/UqyaeQdwcsz0jSRpBtQzLfMrwIeBAxHxH0XtE8BdwBcjYh3wLPCB4tgeRlfKHAR+DHx0SjuWJE1ownDPzH8F4hyHr68xPoFbJtmXJGkS/ISqJJWQ4S5JJWS4S1IJGe6SVEKGu1TD5s2bmT9/Pr29vcyfP5/Nmzc3uyWpIV7PXaqyefNm+vv72bZtG1dffTVPP/00W7duBWD79u1N7k6qj2fuUpWdO3eybds2tmzZwvz589myZQvbtm1j586dzW5NqpvhLlUZHh6mr69vXK2vr4/h4eEmdSQ1znCXqrS3t9Pf3z+u1t/fT3t7e5M6khrnnLtUZf369dx6663ceuut4+qbNm1qUkdS4ya8E9NM8E5Mmk0WLlzIqVOnzqovWLCAoaGhJnQk1Xa+OzF55i5VOXXqFAsXLmRkZITh4WHa29uZN2+ewa6WYrhLNQwNDfHpT3/61aWQ1VM00mznH1SlGhYtWjRuKeSiRYua3ZLUEMNdquHEiRMsXbqUI0eOsHTpUk6cONHslqSGOC0jVWlvb+f06dMcOnSID3/4wwDMmzePtjbPhdQ6fLdKVdavX8/IyMi42sjICOvXr29SR1LjXAopVXEppFrF+ZZCeuYuVTl16hRdXV1kJoODg2QmXV1dNQNfmq0Md6mGr33ta+fdl2Y7w12q4d3vfvd596XZznCXqixYsIBDhw6NWwp56NAhFixY0OzWpLr5B1Wphra2Nsb+bEQEp0+fbmJH0tn8g6rUgOXLl5OZrF69mt27d7N69Woyk+XLlze7NalunrlLVSKCxYsXc/z4cTKTiOCyyy7j2LFjzIafF+kMrwopNejYsWOvbmfmuH2pFTgtI51DRIx7lFqJ4S6dw5kpGKdi1IoMd0kqoQnDPSL+IiKej4hvjam9PiL2RcT3isdFRT0i4k8i4mBE7I+It09n89J02rhxIw8//DAbN25sditSwyZcLRMR7wSGgAcz8xeL2h8BL2TmXRFxG7AoM7dGxCpgM7AKuBa4NzOvnagJV8toNjnfHLtTNJpNJrXOPTP/BXihqrwG2FVs7wJuGlN/MEc9BlwaEVdcWNtSc8yZM6ehujQbXehSyI7MfK7Y/gHQUWwvAQ6PGXekqD1HlYjYAGwA6OjooFKpXGAr0tR673vfy1e+8pWadd+nahWTXueemRkRDf9fNTN3ADtgdFqmp6dnsq1IU+LLX/5yzXpnZye+T9UqLnS1zA/PTLcUj88X9aPAlWPGdRY1qWV87nOfA85e536mLrWCCw33AWBtsb0WeGhM/SPFqpl3ACfHTN9ILcV17mplE07LRMTfAD3A4og4AnwSuAv4YkSsA54FPlAM38PoSpmDwI+Bj05Dz5KkCUwY7pn5m+c4dH2NsQncMtmmJEmT4ydUJamEDHdJKiHDXZJKyHCXpBIy3CWphAx3SSohw12SSshwl85h3rx54x6lVuINsnVRaeR+qCMjI+MeG3m+lyxQs3nmrotKZk74b9OmTTWfu2nTprqeb7BrNvDMXaqyfft2AHbu3Mnw8DDt7e2sX7/+1brUCia8zd5M8DZ7mq26bvtHDt31nma3IdU0qdvsSZJaj+EuSSVkuEtSCRnuklRChrsklZDhLkklZLhLUgkZ7pJUQoa7JJWQlx9Qy3rrp/Zy8icjEw+cpK7b/nHaX+N1r5nHf37yxml/HV08DHe1rJM/GZn2SwNUKhV6enqm9TVgZn6B6OLitIwklZDhLkklZLhLUgkZ7pJUQv5BVS3rtVfdxrJdt03/C+2a/pd47VUAXjdeU8dwV8v60TN3uVpGOgenZSSphKblzD0ifg24F5gD/Hlm3jUdryPNyBnvP83Mh5ikqTTl4R4Rc4A/BW4AjgDfiIiBzHx6ql9LF7eZuLep91BVq5qOaZlrgIOZ+f3M/Cnwt8CaaXgdSdI5TMe0zBLg8Jj9I8C11YMiYgOwAaCjo4NKpTINrUjj9fb2Nvyc2Nb46wwODjb+JGkKNW21TGbuAHYAdHd350ysSJAys6HxM7VaRppq0zEtcxS4csx+Z1GTJM2Q6Qj3bwBvioilEXEJ8CFgYBpeR5J0DlM+LZOZL0fEJuARRpdC/kVmfnuqX0eSdG7TMueemXuAPdPxtSVJE/MTqpJUQoa7JJWQ4S5JJWS4S1IJRaMf6piWJiL+F3i22X1INSwGjjW7Cekcfj4zL691YFaEuzRbRcQTmdnd7D6kRjktI0klZLhLUgkZ7tL57Wh2A9KFcM5dkkrIM3dJKiHDXZJKqGk365CaLSJeAQ6MKd2UmYea1I40pZxz10UrIoYyc2GDzwlGf25OT1Nb0pRwWkYqRMTCiPjniPhmRByIiDVFvSsi/isiHgS+BVwZEb8XEd+IiP0R8anmdi6dzWkZXcxeExH/UWz/D/B+4H2Z+VJELAYei4gzdxF7E7A2Mx+LiBuL/WuAAAYi4p2Z+S8z/Q1I52K462L2k8x825mdiJgH/GFEvBM4DSwBOorDz2bmY8X2jcW/p4r9hYyGveGuWcNwl37mt4DLgV/KzJGIOATML46dGjMugDsz889muD+pbs65Sz/zOuD5Ith7gZ8/x7hHgN+JiIUAEbEkIt4wU01K9fDMXfqZvwIejogDwBPAd2oNysy9EXEV8G+ji2cYAn4beH6mGpUm4lJISSohp2UkqYQMd0kqIcNdkkrIcJekEjLcJamEDHdJKiHDXZJK6P8BMWDIS8PM1LAAAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, ax = plt.subplots(figsize=(10,10)) # to resize the heatmap\n",
        "sns.heatmap(df.drop(\"Survived\",axis=1).corr(), annot=True, ax=ax)"
      ],
      "metadata": {
        "id": "5N7oClPNaEn4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(df.drop(\"Survived\",axis=1),\n",
        "                                                   df[\"Survived\"],\n",
        "                                                   test_size=0.3,\n",
        "                                                   random_state=100)"
      ],
      "metadata": {
        "id": "TYTxpz6XaKWt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "id": "B8_6-56UaQdb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "drop_list = [\"PassengerId\", \"Name\", \"Cabin\", \"Ticket\"]\n",
        "X_train = X_train.drop(drop_list,axis=1)\n",
        "X_test = X_test.drop(drop_list,axis=1)"
      ],
      "metadata": {
        "id": "3d23D5vBaWhv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train[\"Age\"].fillna(X_train[\"Age\"].median(), inplace=True)\n",
        "X_train[\"Embarked\"].fillna(X_train[\"Embarked\"].mode(), inplace=True)\n",
        "\n",
        "X_test[\"Age\"].fillna(X_test[\"Age\"].median(), inplace=True)\n",
        "X_test[\"Embarked\"].fillna(X_test[\"Embarked\"].mode(), inplace=True)"
      ],
      "metadata": {
        "id": "CbOSCOPVajS6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = pd.get_dummies(X_train)\n",
        "X_test = pd.get_dummies(X_test)"
      ],
      "metadata": {
        "id": "JJJset55aoKf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.head()"
      ],
      "metadata": {
        "id": "2cqtK-dnaq_Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "columns = X_train.columns"
      ],
      "metadata": {
        "id": "I1fZQuqRawj4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "x_train = X_train.values\n",
        "x_test = X_test.values\n",
        "\n",
        "min_max_scaler = MinMaxScaler()\n",
        "\n",
        "x_train_scaled = min_max_scaler.fit_transform(x_train)\n",
        "x_test_scaled = min_max_scaler.transform(x_test)\n",
        "\n",
        "X_train = pd.DataFrame(x_train_scaled)\n",
        "X_test = pd.DataFrame(x_test_scaled)\n",
        "X_train.head()"
      ],
      "metadata": {
        "id": "6Af8Mgzfa7w2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bsaZ7nHibRBm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.columns = columns\n",
        "X_test.columns = columns"
      ],
      "metadata": {
        "id": "bFBxkkIGa-cY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.head()"
      ],
      "metadata": {
        "id": "ripOkVy_bEEa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import LinearSVC,SVC,NuSVC\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.metrics import accuracy_score,f1_score\n",
        "\n",
        "svm = SVC()\n",
        "nu_svm = NuSVC()\n",
        "linear_svm = LinearSVC(max_iter=10000)\n",
        "\n",
        "svm_grid_parameters = {'C':[0.01,0.1, 1, 10, 100, 1000], 'kernel':['linear', 'poly', 'sigmoid','rbf'], 'gamma':[1, 0.1, 0.01, 0.001, 0.0001]}\n",
        "nu_svm_grid_parameters = {'nu':[0.1,0.3,0.5,0.7], 'kernel':['linear', 'poly', 'sigmoid','rbf'], 'gamma':[1, 0.1, 0.01, 0.001, 0.0001]}\n",
        "linear_svm_grid_parameters = {'C':[0.01,0.1, 1, 10, 100, 1000]}\n",
        "\n",
        "svm_grid_search = GridSearchCV(svm, svm_grid_parameters)\n",
        "nu_svm_grid_search = GridSearchCV(nu_svm, nu_svm_grid_parameters)\n",
        "linear_svm_grid_search = GridSearchCV(linear_svm, linear_svm_grid_parameters)"
      ],
      "metadata": {
        "id": "ZlcoE3fRbSxJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "svm_grid_search.fit(X_train, y_train)\n",
        "print(\"best parameters for SVM are:\",svm_grid_search.best_estimator_)\n",
        "y_pred_svm_grid = svm_grid_search.predict(X_test)"
      ],
      "metadata": {
        "id": "OypJmTwCgSoa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nu_svm_grid_search.fit(X_train, y_train)\n",
        "print(\"best parameters for NuSVM are:\",nu_svm_grid_search.best_estimator_)\n",
        "y_pred_nu_svm_grid = nu_svm_grid_search.predict(X_test)"
      ],
      "metadata": {
        "id": "xfLog6UhbZv_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "linear_svm_grid_search.fit(X_train, y_train)\n",
        "print(\"best parameters for LinearSVM are:\",linear_svm_grid_search.best_estimator_)\n",
        "y_pred_linear_svm_grid = linear_svm_grid_search.predict(X_test)"
      ],
      "metadata": {
        "id": "KtgNikkkbfE7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Accuracy Score (%) for:\\n\")\n",
        "print(\"SVM: {} %\".format(round(accuracy_score(y_test, y_pred_svm_grid)*100,2)))\n",
        "print(\"NuSVM: {} %\".format(round(accuracy_score(y_test, y_pred_nu_svm_grid)*100,2)))\n",
        "print(\"LinearSVM: {} % \".format(round(accuracy_score(y_test, y_pred_linear_svm_grid)*100,2)))"
      ],
      "metadata": {
        "id": "jNOUCBQydk2s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#f1 score\n",
        "print(f\"f1-score for: \\n\")\n",
        "print(\"SVM: {}\".format(round(f1_score(y_test, y_pred_svm_grid),2)))\n",
        "print(\"NuSVM: {}\".format(round(f1_score(y_test, y_pred_nu_svm_grid),2)))\n",
        "print(\"LinearSVM: {}\".format(round(f1_score(y_test, y_pred_linear_svm_grid),2)))"
      ],
      "metadata": {
        "id": "o0_JkuWwgyLY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#conclusion\n",
        "#Model NuSVC with hypertuned parameters (nu=0.3, kernel='poly', gamma=1) gave highest accuracy (81.34%) and F1 score(0.73). So it is the most accurate model."
      ],
      "metadata": {
        "id": "weKg_1aCg5nw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*titanic prediction using logistic regression*"
      ],
      "metadata": {
        "id": "Y3Maotf8jOtF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "6VdqrPGpjcMf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jRgVqEK3OnS7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "titanic_data = pd.read_csv('/content/train.csv')"
      ],
      "metadata": {
        "id": "nY780tDpkXb6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "titanic_data.head()"
      ],
      "metadata": {
        "id": "gm7juB46kdOr",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 548
        },
        "outputId": "47a9071b-95b1-4f39-cc74-54e59fa43593"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Survived  Pclass  \\\n",
              "0            1         0       3   \n",
              "1            2         1       1   \n",
              "2            3         1       3   \n",
              "3            4         1       1   \n",
              "4            5         0       3   \n",
              "\n",
              "                                                Name     Sex   Age  SibSp  \\\n",
              "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                           Allen, Mr. William Henry    male  35.0      0   \n",
              "\n",
              "   Parch            Ticket     Fare Cabin Embarked  \n",
              "0      0         A/5 21171   7.2500   NaN        S  \n",
              "1      0          PC 17599  71.2833   C85        C  \n",
              "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3      0            113803  53.1000  C123        S  \n",
              "4      0            373450   8.0500   NaN        S  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b3669d41-95c4-4409-8125-7f6eeaed4eff\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3669d41-95c4-4409-8125-7f6eeaed4eff')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b3669d41-95c4-4409-8125-7f6eeaed4eff button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b3669d41-95c4-4409-8125-7f6eeaed4eff');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "titanic_data.isnull().sum()"
      ],
      "metadata": {
        "id": "2QooWjsBlxk1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "82b4b826-af3e-46b5-cf70-8f2517e0789d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PassengerId      0\n",
              "Survived         0\n",
              "Pclass           0\n",
              "Name             0\n",
              "Sex              0\n",
              "Age            177\n",
              "SibSp            0\n",
              "Parch            0\n",
              "Ticket           0\n",
              "Fare             0\n",
              "Cabin          687\n",
              "Embarked         2\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "titanic_data = titanic_data.drop(columns='Cabin', axis=1)"
      ],
      "metadata": {
        "id": "q0F3JhbumbiJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True)"
      ],
      "metadata": {
        "id": "cjVpBv7GmkQC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(titanic_data['Embarked'].mode())"
      ],
      "metadata": {
        "id": "sQe3xJFvmpSo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "58791de6-55b3-4541-9f6a-89e7519f7659"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    S\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)"
      ],
      "metadata": {
        "id": "BLGuwCuXmwU6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "titanic_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)"
      ],
      "metadata": {
        "id": "C4QZwc91myp7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "titanic_data = titanic_data.drop(columns = ['passengerId','Name','Ticket','Survived'],axis=1)"
      ],
      "metadata": {
        "id": "TGqlRnncpMqZ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}